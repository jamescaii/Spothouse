{"version":3,"sources":["Config.js","Queue.js","hash.js","TextBox.js","Player.js","SpotHouse.js","App.js","reportWebVitals.js","index.js"],"names":["scopes","Queue","props","changeColor","console","log","document","querySelectorAll","addEventListener","event","currentTarget","classList","toggle","updateSongValue","songName","target","id","toSend","increased","axios","post","headers","then","response","catch","error","className","songQueue","border","table-layour","bordercolor","map","item","align","onClick","width","height","d","fill","name","src","artwork","style","fontSize","padding","hash","window","location","substring","split","reduce","initial","parts","decodeURIComponent","TextBox","textInput","useRef","useState","textInp","setText","useEffect","current","force","label","type","value","onChange","e","handleChange","Player","progressBarStyles","progress_ms","duration_ms","album","images","url","artists","SpotHouse","MESSAGE_TYPE","CONNECT","UPDATE","SEND","setup_lobby","setState","lobbyID","data","setup_websocket","WebSocket","onmessage","msg","JSON","parse","myId","getProperty","currentQueue","push","sendRequest","req","uri","clickedSongURI","conn","send","updateBackendQueue","currentRequesters","orderedList","orderedListRequesters","newQueue","newQueueRequesters","i","state","length","requester","currentQueueRequesters","songs","users","j","addToSpotifyQueue","token","toAdd","encodeURIComponent","trim","$","beforeSend","xhr","setRequestHeader","success","shift","added","scrollToBottom","endPage","scrollIntoView","behavior","is_playing","no_data","no_top_data","searchQuery","searchResults","artist","myID","topTracks","count","getCurrentlyPlaying","bind","tick","param","this","_token","access_token","getTopTracks","interval","setInterval","clearInterval","prevProps","prevState","searchQueryParameter","tracks","items","a","clickedArtist","textContent","clickedName","clickedURI","clickedArt","joined","concat","href","join","changeQuery","visibility","onPress","getSearch","class","clickResult","display","float","clear","ref","el","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.02aef0f1.chunk.js","sourcesContent":["export const authEndpoint = \"https://accounts.spotify.com/authorize\";\n\nexport const clientId = \"41b5d9c762d04b6182549771690cf81c\";\nexport const redirectUri = \"https://spothouse-app.herokuapp.com/callback\";\n//export const redirectUri = \"http://localhost:3000/callback\";\nexport const scopes = [\n    \"user-top-read\",\n    \"user-read-currently-playing\",\n    \"user-read-playback-state\",\n    \"user-modify-playback-state\",\n];","import React, {useState, useEffect, useRef} from 'react';\nimport axios from 'axios';\nimport './Queue.css';\n\nconst Queue = props => {\n    const changeColor = () => {\n        console.log(\"changed\")\n        for (const btn of document.querySelectorAll('.vote')) {\n            btn.addEventListener('click', event => {\n                event.currentTarget.classList.toggle('on');\n            });\n        }\n    }\n\n    const updateSongValue = (props) => {\n        console.log(\"changed\")\n        for (const btn of document.querySelectorAll('.vote')) {\n            btn.addEventListener('click', event => {\n                event.currentTarget.classList.toggle('on');\n            });\n        }\n        let songName = props.target.id\n        console.log(songName)\n        const toSend = {\n            increased: songName\n        }\n        let config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                'Access-Control-Allow-Origin': '*',\n            }\n        }\n        axios.post(\n            \"/rankings\",\n            toSend,\n            config\n        )\n            .then(response => {\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    return (\n        <div className=\"App\"><center>\n            <h2>Queue</h2>\n            <br></br>\n            {props.songQueue[0] && (\n                <table id=\"table\" className=\"table\" border=\"1px\" table-layour=\"fixed\" bordercolor=\"black\">\n                    <tbody>\n                    {props.songQueue.map(item =>\n                        <tr>\n                            <td align=\"center\">\n                                <span className=\"vote\" onClick={updateSongValue}>\n                                  <svg width=\"36\" height=\"36\">\n                                    <path d=\"M2 26h32L18 10 2 26z\" fill=\"currentColor\" id={item.name}></path>\n                                  </svg>\n                                </span>\n                                <span className=\"vote\" onClick={changeColor}>\n                                  <svg width=\"36\" height=\"36\">\n                                    <path d=\"M2 10h32L18 26 2 10z\" fill=\"currentColor\"></path>\n                                  </svg>\n                                </span>\n                            </td>\n                            <td align=\"center\"><img src={item.artwork} width=\"50\" align=\"center\"/></td>\n                            <td align=\"center\" style={{fontSize: 13, padding: 10}}>{item.name}</td>\n                        </tr>\n                    )\n                    }\n                    </tbody>\n                </table>\n            )}\n        </center>\n            <br></br>\n        </div>\n    );\n}\n\nexport default Queue;","// Get the hash of the url\nconst hash = window.location.hash\n  .substring(1)\n  .split(\"&\")\n  .reduce(function(initial, item) {\n    if (item) {\n      var parts = item.split(\"=\");\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n    }\n    return initial;\n  }, {});\nwindow.location.hash = \"\";\n\nexport default hash;","import React, {useEffect, useRef, useState} from 'react';\nimport './App.css';\nimport './App.js';\n\n/**\n * A functional component representing a TextBox\n * @param props = the inputted props from the parent\n * @return the TextBox element\n */\nfunction TextBox(props) {\n    const textInput = useRef(0);\n    const [textInp, setText] = useState(0);\n    const [searchQuery, setSearch] = useState(\"\")\n\n    /**\n     * handleChange.\n     * Changes our variables information on the box to the user text\n     * @param props = the inputted props from the parent\n     * @param event = the text of the user\n     */\n    function handleChange(props, event) {\n        props.onChange(event.target.value)\n    }\n\n    /**\n     * useEffect (for nearest clicking).\n     * Forcibly changes the text of the box to the user click\n     */\n    useEffect(() => {\n        textInput.current = props.force\n        setText(props.force)\n    }, [props.force]);\n\n  return (\n    <div className=\"TextBox\">\n      <div>{props.label}</div>\n      <input \n        type={'text'}\n        value={textInp}\n        onChange={(e) => handleChange(props, e)}\n      />\n    </div>\n  );\n}\n\nexport default TextBox;\n","import React from \"react\";\nimport \"./Player.css\";\n\nconst Player = props => {\n\n  const progressBarStyles = {\n    width: (props.progress_ms * 100 / props.item.duration_ms) + '%'\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"main-wrapper\">\n        <div className=\"now-playing__img\">\n          <img src={props.item.album.images[0].url} />\n        </div>\n        <div className=\"now-playing__side\">\n          <div className=\"now-playing__name\">{props.item.name}</div>\n          <div className=\"now-playing__artist\">\n            {props.item.artists[0].name}\n          </div>\n          <div className=\"progress\">\n            <div className=\"progress__bar\" style={progressBarStyles} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Player;","import React, { Component } from \"react\";\nimport * as $ from \"jquery\";\nimport { authEndpoint, clientId, redirectUri, scopes } from \"./Config\";\nimport { AwesomeButton } from \"react-awesome-button\";\nimport Queue from \"./Queue\"\nimport hash from \"./hash\";\nimport \"./App.css\";\nimport TextBox from './TextBox';\nimport Player from './Player';\nimport axios from \"axios\";\n\nclass SpotHouse extends Component {\n  constructor() {\n    super();\n    this.state = {\n      token: null,\n      item: {\n        album: {\n          images: [{ url: \"\" }]\n        },\n        name: \"\",\n        artists: [{ name: \"\" }],\n        duration_ms: 0\n      },\n      is_playing: \"Paused\",\n      progress_ms: 0,\n      no_data: false,\n      no_top_data: false,\n      searchQuery: \"\",\n      searchResults: [\n        {\n          name: \"\",\n          artist: \"\",\n          uri: \"\",\n          artwork: \"\",\n        }\n      ],\n      clickedSongURI: \"\",\n      conn: null,\n      lobbyID: -1,\n      myID: -1,\n      currentQueue: [],\n      currentQueueRequesters: [],\n      topTracks: [],\n      count: 0,\n      added: false\n    };\n\n    this.setup_lobby();\n    this.setup_websocket();\n    this.getCurrentlyPlaying = this.getCurrentlyPlaying.bind(this);\n    this.tick = this.tick.bind(this);\n  }\n\n  changeQuery(param) {\n    this.setState({ searchQuery: param })\n    console.log(param)\n  }\n\n  componentDidMount() {\n    // Set token\n    let _token = hash.access_token;\n\n    if (_token) {\n      // Set token\n      this.setState({\n        token: _token\n      });\n      this.getTopTracks(_token);\n      this.getCurrentlyPlaying(_token);\n    }\n\n    // set interval for polling every .5 seconds\n    this.interval = setInterval(() => this.tick(), 500);\n  }\n\n  componentWillUnmount() {\n    // clear the interval to save resources\n    clearInterval(this.interval);\n  }\n\n  tick() {\n    if(this.state.token) {\n      this.getCurrentlyPlaying(this.state.token);\n      this.updateBackendQueue();\n      if (this.state.progress_ms/this.state.item.duration_ms > .95 & !this.state.added) {\n        if (this.state.currentQueue.length > 0)\n          this.addToSpotifyQueue(this.state.token);\n      }\n    }\n  }\n\n  MESSAGE_TYPE = {\n    CONNECT: 0,\n    UPDATE: 1,\n    SEND: 2\n  };\n\n  setup_lobby = () => {\n    const toSend = {\n    }\n    let config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        'Access-Control-Allow-Origin': '*',\n      }\n    }\n    axios.post(\n        \"/setupGUI\",\n        toSend,\n        config\n    )\n        .then(response => {\n          // console.log(\"THIS IS THE BACKEND QUEUE\", response)\n          this.setState({lobbyID: response.data[\"lobbyID\"]})\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n  }\n\n  setup_websocket = () => {\n    // TODO create WebSocket listening at and sending to ws://localhost:4567/message\n    //const conn = new WebSocket(\"https://spothouse-app.herokuapp.com/callback#\");\n    const conn = new WebSocket(\"ws://localhost:4567/0\");\n\n    // TODO set up client response to messages received from server\n    conn.onmessage = msg => {\n      const data = JSON.parse(msg.data);\n      switch (data.type) {\n          // default can go anywhere in the switch order ^_^\n        default:\n          console.log('Unknown message type!', data.type);\n          break;\n        case this.MESSAGE_TYPE.CONNECT:\n          // We get this message when the server recognizes that we (the client) have connected and sends back our unique id\n          this.myId = data.getProperty(\"id\");\n          break;\n        case this.MESSAGE_TYPE.UPDATE:\n          // We get this message when some client broadcast a message to all clients\n          // TODO append to the message board unordered list (in chat.ftl) the received message\n          this.currentQueue.push(data.getProperty(\"songID\"));\n          break;\n      }\n    };\n  }\n\n// When a user hits the Send! button this method gets called (chat.ftl)\n  sendRequest = () => {\n    // TODO create a new message of type SEND\n    let req = {\n      uri: this.clickedSongURI\n    }\n    // TODO use conn to send the message to the server\n    this.conn.send(req);\n  }\n  \n  updateBackendQueue = () => {\n    let current = []\n    let currentRequesters = []\n    let orderedList = []\n    let orderedListRequesters = []\n    let newQueue = []\n    let newQueueRequesters = []\n    for (let i = 0; i < this.state.currentQueue.length; i++) {\n        let name = this.state.currentQueue[i].name\n        let requester = this.state.currentQueueRequesters[i].name\n        current.push(name)\n        currentRequesters.push(requester)\n    }\n      const toSend = {\n          songs: current,\n          users:currentRequesters\n      }\n      let config = {\n          headers: {\n              \"Content-Type\": \"application/json\",\n              'Access-Control-Allow-Origin': '*',\n          }\n      }\n      axios.post(\n          \"/queue\",\n          toSend,\n          config\n      )\n          .then(response => {\n              // console.log(\"THIS IS THE BACKEND QUEUE\", response)\n              orderedList = response.data[\"songList\"]\n              orderedListRequesters = response.data[\"requesterList\"]\n              for (let i = 0; i < orderedList.length; i++) {\n                  let songName = orderedList[i].name\n                  let requesterName = orderedListRequesters[i].name\n                  for (let j = 0; j < this.state.currentQueue.length; j++) {\n                      if (this.state.currentQueue[j].name === songName) {\n                          newQueue.push(this.state.currentQueue[j])\n                          newQueueRequesters.push(this.state.currentQueueRequesters[j])\n                      }\n                  }\n              }\n              this.setState({currentQueue: newQueue})\n          })\n          .catch(function (error) {\n              console.log(error);\n          });\n  }\n\n  addToSpotifyQueue = (token) => {\n    let toAdd = encodeURIComponent(this.state.currentQueue[0].uri.trim()) \n    // Make a call using the token\n    $.ajax({\n      url: \"https://api.spotify.com/v1/me/player/queue?uri=\" + toAdd,\n      type: \"POST\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: data => {\n        this.state.currentQueue.shift();\n        this.setState({added: true})\n      }\n    });\n  }\n  scrollToBottom = () => {\n    this.endPage.scrollIntoView({ behavior: \"smooth\" });\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.count !== this.state.count)\n      this.scrollToBottom();\n    if (prevState.item.name !== this.state.item.name)\n      this.setState({added: false})\n  }\n  getSearch(token, searchQuery) {\n    // parse searchQuery\n    let searchQueryParameter = encodeURIComponent(searchQuery.trim()) \n    // Make a call using the token\n    $.ajax({\n      url: \"https://api.spotify.com/v1/search?q=\" + searchQueryParameter + \"&type=track\",\n      type: \"GET\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: data => {\n        //console.log(data)\n        // Checks if the data is not empty\n        if(data) {\n          console.log(data)\n          this.setState({\n            searchResults: data.tracks.items.map((item) => ({\n              name: item.name,\n              artist: item.artists[0].name,\n              uri: item.uri,\n              artwork: item.album.images[0].url\n            }\n          )\n          )});\n          console.log(this.state.searchResults)\n          return;\n        }\n\n        this.setState({\n          item: data.item,\n        });\n      }\n    });\n  }\n\n  getCurrentlyPlaying(token) {\n    // Make a call using the token\n    $.ajax({\n      url: \"https://api.spotify.com/v1/me/player\",\n      type: \"GET\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: data => {\n        // Checks if the data is not empty\n        if(!data) {\n          this.setState({\n            no_data: true,\n          });\n          return;\n        }\n\n        this.setState({\n          item: data.item,\n          is_playing: data.is_playing,\n          progress_ms: data.progress_ms,\n          no_data: false /* We need to \"reset\" the boolean, in case the\n                            user does not give F5 and has opened his Spotify. */\n        });\n      }\n    });\n  }\n  \n  getTopTracks(token) {\n    // Make a call using the token\n    $.ajax({\n      url: \"https://api.spotify.com/v1/me/top/tracks?time_range=short_term&limit=20\",\n      type: \"GET\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: data => {\n        // Checks if the data is not empty\n        if(!data) {\n          this.setState({\n            no_top_data: true,\n          });\n          return;\n        }\n        this.setState({\n          topTracks: data.items.map((item) => ({\n            name: item.name,\n            artist: item.artists[0].name,\n            uri: item.uri,\n            artwork: item.album.images[0].url\n          }\n          ))\n        });\n        console.log(this.state.topTracks)\n      }\n    });\n  }\n\n  async clickResult(e) {\n    let clickedArtist = e.currentTarget.textContent.split(\" -, \")[0]\n    let clickedName = e.currentTarget.textContent.split(\" -, \")[1]\n    let clickedURI = e.currentTarget.textContent.split(\" -, \")[2]\n    let clickedArt = e.currentTarget.textContent.split(\" -, \")[3]\n    await this.setState({clickedSongURI: clickedURI})\n    var joined = this.state.currentQueue.concat({name: clickedName,\n      artist: clickedArtist,\n      artwork: clickedArt,\n      uri: clickedURI});\n    await this.setState({currentQueue: joined})\n    this.sendRequest();\n    this.setState({count: this.state.count + 1})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {!this.state.token && (\n            <a\n              className=\"btn btn--loginApp-link\"\n              href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n                \"%20\"\n              )}&response_type=token&show_dialog=true`}\n            >\n              Login to Spotify\n            </a>\n          )}\n          {this.state.token && (\n            <>\n            <TextBox label=\"Search for a song:\" force={this.state.searchQuery} onChange={this.changeQuery.bind(this)}/>\n            <hr style={{height:10, visibility:\"hidden\"}} />\n            <AwesomeButton type=\"primary\" className=\"btn btn--search\" onPress={() => {\n                this.getSearch(this.state.token, this.state.searchQuery)\n            }}>Submit</AwesomeButton>\n            <br></br>\n            <p style={{fontSize:\"small\"}}>Click on a song to add it to the queue!</p>\n            <br></br>\n            <div class=\"row\">\n              <div class=\"column\">\n                {this.state.token && !this.state.no_top_data && (\n                  <>     \n                  <h4>Your top tracks:</h4>\n                  <br></br>\n                    {this.state.topTracks.map(item => <p className=\"search\" onClick={item => this.clickResult(item)}>\n                      {item.artist} -<span style={{display: \"none\"}}>,</span> {item.name}<div style={{display: \"none\"}}> -, {item.uri} -, {item.artwork}</div></p>)}\n                  <br></br>\n                  </>\n                )}\n              </div>\n              <div class=\"column\">\n                <hr width=\"300\" style={{visibility:\"hidden\"}}/>\n                {this.state.searchResults[0].name && (\n                  <>\n                  <h4>Search results:</h4>\n                  <br></br>\n                  {this.state.searchResults.map(item => <p className=\"search\" onClick={item => this.clickResult(item)}>\n                    {item.artist} -<span style={{display: \"none\"}}>,</span> {item.name}<div style={{display: \"none\"}}> -, {item.uri} -, {item.artwork}</div></p>)} \n                  </>\n                )}\n\n              </div>\n            </div>\n            </>\n          )}    \n        </header>\n        <br></br>\n        {this.state.token && !this.state.no_data && this.state.item && (\n            <>\n            <Player\n              item={this.state.item}\n              is_playing={this.state.is_playing}\n              progress_ms={this.state.progress_ms}\n            />\n            \n            <Queue \n              songQueue = {this.state.currentQueue}\n              />\n            <br></br>\n            </>\n          )}\n          {this.state.no_data && (\n            <>     \n            \n            <Queue \n              songQueue = {this.state.currentQueue}\n              />\n            <br></br>\n              \n            </>\n          )}\n          <div style={{ float:\"left\", clear: \"both\" }}\n               ref={(el) => { this.endPage = el; }}>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default SpotHouse;","import React, { Component } from 'react';\nimport './App.css';\nimport SpotHouse from './SpotHouse.js';\n\n/**\n * Main component, for the website and logo.\n */\nclass App extends Component {\n    render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h2>SpotHouse!</h2>\n        </div>\n        <div>\n            <SpotHouse/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n//export const conn = new WebSocket(\"https://spothouse-app.herokuapp.com/callback#\");\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}